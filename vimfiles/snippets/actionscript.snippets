snippet /       单行注释
	// ${1}
snippet //      多行注释
	/**
	* ${1}
	*/
snippet -       分隔注释
	// -----------------${1}-----------------
# 类
snippet pa      创建类
	package ${1}
	{
		public class ${2}
		{
			public function ${3}(${4})
			{
				${5}
			}
		}
	}
snippet pae    创建继承类
	package ${1}
	{
		import ${2};

		public class ${3} extends ${5}
		{
			public function ${6}(${7})
			{
				super();

				${8}
			}
		}
	}
snippet pai    创建实现类
	package ${1}
	{
		import ${2};

		public class ${3} implements ${5}
		{
			public function ${6}(${7})
			{
				${8}
			}
		}
	}
snippet im      导入包
	import ${1};
snippet cl      创建类
	${1}class ${2}
	{
		${3}
	}
snippet cle     创建继承类
	${1}class ${2} extends ${3}
	{
		${4}
	}
# 变量
snippet va      定义变量
	${1}var ${2}:${3};
# 变量
snippet fu      创建函数
	${1} function ${2}(${3}):${4}
	{
		${5}
	}
snippet if      if
	if(${1})
	{
	    ${2}
	}
snippet elif    else if
	else if(${1})
	{
	    ${2}
	}
snippet el      else
	else
	{
	    ${1}
	}
snippet fo      for
	for(${1})
	{
	    ${2}
	}
snippet foe     for each
	for each(${1})
	{
	    ${2}
	}
snippet wh      while
	while(${1})
	{
	    ${2}
	}
snippet do      do .. while
	do
	{
	    ${2}
	}while(${1});
snippet sw      switch
	switch(${1})
	{
	    ${2}
	}
snippet ca      case
	case ${1}:
	    ${2}
snippet de      default
	default:
	    ${1}
# 异常处理
snippet thr     抛出异常
	throw ${1};
snippet try     监控代码块
	try
	{
	    ${1}
	}
snippet cat     捕获异常
	catch(${1})
	{
	    ${2}
	}
snippet fin     善后处理
	finally
	{
	    ${1}
	}
# 单个关键字
snippet re      返回
	return ${1};
snippet del     删除
	delete ${1};
snippet tr      文本打印
	trace(${1});
snippet th      this
	this.${1}
snippet ?:       三元运算符
	${1} ? ${2} : ${3};
# 常用函数
snippet tos     转换为字符串
	toString(${1});
snippet isn     判断是否为非数值
	isNaN(${1})
snippet pai     转换为整数
	parseInt(${1})
